package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CandidatureEAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatureEAllPropertiesEquals(CandidatureE expected, CandidatureE actual) {
        assertCandidatureEAutoGeneratedPropertiesEquals(expected, actual);
        assertCandidatureEAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatureEAllUpdatablePropertiesEquals(CandidatureE expected, CandidatureE actual) {
        assertCandidatureEUpdatableFieldsEquals(expected, actual);
        assertCandidatureEUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatureEAutoGeneratedPropertiesEquals(CandidatureE expected, CandidatureE actual) {
        assertThat(expected)
            .as("Verify CandidatureE auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatureEUpdatableFieldsEquals(CandidatureE expected, CandidatureE actual) {
        assertThat(expected)
            .as("Verify CandidatureE relevant properties")
            .satisfies(e -> assertThat(e.getOffreFormation()).as("check offreFormation").isEqualTo(actual.getOffreFormation()))
            .satisfies(e -> assertThat(e.getDateDebutOffre()).as("check dateDebutOffre").isEqualTo(actual.getDateDebutOffre()))
            .satisfies(e -> assertThat(e.getDateFinOffre()).as("check dateFinOffre").isEqualTo(actual.getDateFinOffre()))
            .satisfies(e -> assertThat(e.getDateDepot()).as("check dateDepot").isEqualTo(actual.getDateDepot()))
            .satisfies(e -> assertThat(e.getResultat()).as("check resultat").isEqualTo(actual.getResultat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatureEUpdatableRelationshipsEquals(CandidatureE expected, CandidatureE actual) {
        assertThat(expected)
            .as("Verify CandidatureE relationships")
            .satisfies(e -> assertThat(e.getEleve()).as("check eleve").isEqualTo(actual.getEleve()))
            .satisfies(e -> assertThat(e.getEtudiant()).as("check etudiant").isEqualTo(actual.getEtudiant()))
            .satisfies(e -> assertThat(e.getFormationInitiale()).as("check formationInitiale").isEqualTo(actual.getFormationInitiale()))
            .satisfies(e -> assertThat(e.getEtablissement()).as("check etablissement").isEqualTo(actual.getEtablissement()));
    }
}
