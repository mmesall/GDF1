package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiplomeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiplomeAllPropertiesEquals(Diplome expected, Diplome actual) {
        assertDiplomeAutoGeneratedPropertiesEquals(expected, actual);
        assertDiplomeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiplomeAllUpdatablePropertiesEquals(Diplome expected, Diplome actual) {
        assertDiplomeUpdatableFieldsEquals(expected, actual);
        assertDiplomeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiplomeAutoGeneratedPropertiesEquals(Diplome expected, Diplome actual) {
        assertThat(expected)
            .as("Verify Diplome auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiplomeUpdatableFieldsEquals(Diplome expected, Diplome actual) {
        assertThat(expected)
            .as("Verify Diplome relevant properties")
            .satisfies(e -> assertThat(e.getIntitule()).as("check intitule").isEqualTo(actual.getIntitule()))
            .satisfies(e -> assertThat(e.getDomaine()).as("check domaine").isEqualTo(actual.getDomaine()))
            .satisfies(e -> assertThat(e.getNiveau()).as("check niveau").isEqualTo(actual.getNiveau()))
            .satisfies(e -> assertThat(e.getMention()).as("check mention").isEqualTo(actual.getMention()))
            .satisfies(e -> assertThat(e.getAnneeObtention()).as("check anneeObtention").isEqualTo(actual.getAnneeObtention()))
            .satisfies(e -> assertThat(e.getEtablissement()).as("check etablissement").isEqualTo(actual.getEtablissement()))
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(
                e -> assertThat(e.getDocumentContentType()).as("check document contenty type").isEqualTo(actual.getDocumentContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiplomeUpdatableRelationshipsEquals(Diplome expected, Diplome actual) {
        assertThat(expected)
            .as("Verify Diplome relationships")
            .satisfies(e -> assertThat(e.getEleve()).as("check eleve").isEqualTo(actual.getEleve()))
            .satisfies(e -> assertThat(e.getEtudiant()).as("check etudiant").isEqualTo(actual.getEtudiant()))
            .satisfies(e -> assertThat(e.getProfessionnel()).as("check professionnel").isEqualTo(actual.getProfessionnel()))
            .satisfies(e -> assertThat(e.getDemandeur()).as("check demandeur").isEqualTo(actual.getDemandeur()));
    }
}
