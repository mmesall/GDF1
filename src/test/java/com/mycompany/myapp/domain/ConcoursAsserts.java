package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConcoursAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConcoursAllPropertiesEquals(Concours expected, Concours actual) {
        assertConcoursAutoGeneratedPropertiesEquals(expected, actual);
        assertConcoursAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConcoursAllUpdatablePropertiesEquals(Concours expected, Concours actual) {
        assertConcoursUpdatableFieldsEquals(expected, actual);
        assertConcoursUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConcoursAutoGeneratedPropertiesEquals(Concours expected, Concours actual) {
        assertThat(expected)
            .as("Verify Concours auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConcoursUpdatableFieldsEquals(Concours expected, Concours actual) {
        assertThat(expected)
            .as("Verify Concours relevant properties")
            .satisfies(e -> assertThat(e.getNomConcours()).as("check nomConcours").isEqualTo(actual.getNomConcours()))
            .satisfies(e -> assertThat(e.getNomEtablissement()).as("check nomEtablissement").isEqualTo(actual.getNomEtablissement()))
            .satisfies(e -> assertThat(e.getNiveauEtude()).as("check niveauEtude").isEqualTo(actual.getNiveauEtude()))
            .satisfies(e -> assertThat(e.getDateOuverture()).as("check dateOuverture").isEqualTo(actual.getDateOuverture()))
            .satisfies(e -> assertThat(e.getDateCloture()).as("check dateCloture").isEqualTo(actual.getDateCloture()))
            .satisfies(e -> assertThat(e.getDateConcours()).as("check dateConcours").isEqualTo(actual.getDateConcours()))
            .satisfies(e -> assertThat(e.getAffiche()).as("check affiche").isEqualTo(actual.getAffiche()))
            .satisfies(
                e -> assertThat(e.getAfficheContentType()).as("check affiche contenty type").isEqualTo(actual.getAfficheContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConcoursUpdatableRelationshipsEquals(Concours expected, Concours actual) {
        assertThat(expected)
            .as("Verify Concours relationships")
            .satisfies(e -> assertThat(e.getFormation()).as("check formation").isEqualTo(actual.getFormation()));
    }
}
