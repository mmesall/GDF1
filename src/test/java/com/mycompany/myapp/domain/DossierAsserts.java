package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DossierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDossierAllPropertiesEquals(Dossier expected, Dossier actual) {
        assertDossierAutoGeneratedPropertiesEquals(expected, actual);
        assertDossierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDossierAllUpdatablePropertiesEquals(Dossier expected, Dossier actual) {
        assertDossierUpdatableFieldsEquals(expected, actual);
        assertDossierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDossierAutoGeneratedPropertiesEquals(Dossier expected, Dossier actual) {
        assertThat(expected)
            .as("Verify Dossier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDossierUpdatableFieldsEquals(Dossier expected, Dossier actual) {
        assertThat(expected)
            .as("Verify Dossier relevant properties")
            .satisfies(e -> assertThat(e.getNumDossier()).as("check numDossier").isEqualTo(actual.getNumDossier()))
            .satisfies(e -> assertThat(e.getPrenom()).as("check prenom").isEqualTo(actual.getPrenom()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getNomUtilisateur()).as("check nomUtilisateur").isEqualTo(actual.getNomUtilisateur()))
            .satisfies(e -> assertThat(e.getDateNaiss()).as("check dateNaiss").isEqualTo(actual.getDateNaiss()))
            .satisfies(e -> assertThat(e.getLieuNaiss()).as("check lieuNaiss").isEqualTo(actual.getLieuNaiss()))
            .satisfies(e -> assertThat(e.getRegionNaiss()).as("check regionNaiss").isEqualTo(actual.getRegionNaiss()))
            .satisfies(e -> assertThat(e.getDepartementNaiss()).as("check departementNaiss").isEqualTo(actual.getDepartementNaiss()))
            .satisfies(e -> assertThat(e.getTypePiece()).as("check typePiece").isEqualTo(actual.getTypePiece()))
            .satisfies(e -> assertThat(e.getNumeroPiece()).as("check numeroPiece").isEqualTo(actual.getNumeroPiece()))
            .satisfies(e -> assertThat(e.getSexe()).as("check sexe").isEqualTo(actual.getSexe()))
            .satisfies(e -> assertThat(e.getRegionResidence()).as("check regionResidence").isEqualTo(actual.getRegionResidence()))
            .satisfies(e -> assertThat(e.getDepResidence()).as("check depResidence").isEqualTo(actual.getDepResidence()))
            .satisfies(e -> assertThat(e.getAdresseResidence()).as("check adresseResidence").isEqualTo(actual.getAdresseResidence()))
            .satisfies(e -> assertThat(e.getTelephone1()).as("check telephone1").isEqualTo(actual.getTelephone1()))
            .satisfies(e -> assertThat(e.getTelephone2()).as("check telephone2").isEqualTo(actual.getTelephone2()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNiveauFormation()).as("check niveauFormation").isEqualTo(actual.getNiveauFormation()))
            .satisfies(e -> assertThat(e.getSpecialite()).as("check specialite").isEqualTo(actual.getSpecialite()))
            .satisfies(e -> assertThat(e.getIntituleDiplome()).as("check intituleDiplome").isEqualTo(actual.getIntituleDiplome()))
            .satisfies(e -> assertThat(e.getDiplome()).as("check diplome").isEqualTo(actual.getDiplome()))
            .satisfies(
                e -> assertThat(e.getDiplomeContentType()).as("check diplome contenty type").isEqualTo(actual.getDiplomeContentType())
            )
            .satisfies(e -> assertThat(e.getAnneeObtention()).as("check anneeObtention").isEqualTo(actual.getAnneeObtention()))
            .satisfies(e -> assertThat(e.getLieuObtention()).as("check lieuObtention").isEqualTo(actual.getLieuObtention()))
            .satisfies(e -> assertThat(e.getCv()).as("check cv").isEqualTo(actual.getCv()))
            .satisfies(e -> assertThat(e.getCvContentType()).as("check cv contenty type").isEqualTo(actual.getCvContentType()))
            .satisfies(e -> assertThat(e.getLettreMotivation()).as("check lettreMotivation").isEqualTo(actual.getLettreMotivation()))
            .satisfies(
                e ->
                    assertThat(e.getLettreMotivationContentType())
                        .as("check lettreMotivation contenty type")
                        .isEqualTo(actual.getLettreMotivationContentType())
            )
            .satisfies(e -> assertThat(e.getProfession()).as("check profession").isEqualTo(actual.getProfession()))
            .satisfies(e -> assertThat(e.getAutreSpecialite()).as("check autreSpecialite").isEqualTo(actual.getAutreSpecialite()))
            .satisfies(e -> assertThat(e.getNomCompetence()).as("check nomCompetence").isEqualTo(actual.getNomCompetence()))
            .satisfies(e -> assertThat(e.getNiveauCompetence()).as("check niveauCompetence").isEqualTo(actual.getNiveauCompetence()))
            .satisfies(e -> assertThat(e.getIntituleExperience()).as("check intituleExperience").isEqualTo(actual.getIntituleExperience()))
            .satisfies(e -> assertThat(e.getPosteOccupe()).as("check posteOccupe").isEqualTo(actual.getPosteOccupe()))
            .satisfies(e -> assertThat(e.getDateDebut()).as("check dateDebut").isEqualTo(actual.getDateDebut()))
            .satisfies(e -> assertThat(e.getDateFin()).as("check dateFin").isEqualTo(actual.getDateFin()))
            .satisfies(e -> assertThat(e.getNomEntreprise()).as("check nomEntreprise").isEqualTo(actual.getNomEntreprise()))
            .satisfies(e -> assertThat(e.getMission()).as("check mission").isEqualTo(actual.getMission()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDossierUpdatableRelationshipsEquals(Dossier expected, Dossier actual) {
        assertThat(expected)
            .as("Verify Dossier relationships")
            .satisfies(e -> assertThat(e.getEleve()).as("check eleve").isEqualTo(actual.getEleve()))
            .satisfies(e -> assertThat(e.getEtudiant()).as("check etudiant").isEqualTo(actual.getEtudiant()))
            .satisfies(e -> assertThat(e.getProfessionnel()).as("check professionnel").isEqualTo(actual.getProfessionnel()));
    }
}
