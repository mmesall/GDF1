package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CandidaturePAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidaturePAllPropertiesEquals(CandidatureP expected, CandidatureP actual) {
        assertCandidaturePAutoGeneratedPropertiesEquals(expected, actual);
        assertCandidaturePAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidaturePAllUpdatablePropertiesEquals(CandidatureP expected, CandidatureP actual) {
        assertCandidaturePUpdatableFieldsEquals(expected, actual);
        assertCandidaturePUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidaturePAutoGeneratedPropertiesEquals(CandidatureP expected, CandidatureP actual) {
        assertThat(expected)
            .as("Verify CandidatureP auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidaturePUpdatableFieldsEquals(CandidatureP expected, CandidatureP actual) {
        assertThat(expected)
            .as("Verify CandidatureP relevant properties")
            .satisfies(e -> assertThat(e.getOffreFormation()).as("check offreFormation").isEqualTo(actual.getOffreFormation()))
            .satisfies(e -> assertThat(e.getDateDebutOffre()).as("check dateDebutOffre").isEqualTo(actual.getDateDebutOffre()))
            .satisfies(e -> assertThat(e.getDateFinOffre()).as("check dateFinOffre").isEqualTo(actual.getDateFinOffre()))
            .satisfies(e -> assertThat(e.getDateDepot()).as("check dateDepot").isEqualTo(actual.getDateDepot()))
            .satisfies(e -> assertThat(e.getResultat()).as("check resultat").isEqualTo(actual.getResultat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidaturePUpdatableRelationshipsEquals(CandidatureP expected, CandidatureP actual) {
        assertThat(expected)
            .as("Verify CandidatureP relationships")
            .satisfies(e -> assertThat(e.getProfessionnel()).as("check professionnel").isEqualTo(actual.getProfessionnel()))
            .satisfies(e -> assertThat(e.getFormationContinue()).as("check formationContinue").isEqualTo(actual.getFormationContinue()))
            .satisfies(e -> assertThat(e.getEtablissement()).as("check etablissement").isEqualTo(actual.getEtablissement()));
    }
}
