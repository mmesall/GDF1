package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BailleurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBailleurAllPropertiesEquals(Bailleur expected, Bailleur actual) {
        assertBailleurAutoGeneratedPropertiesEquals(expected, actual);
        assertBailleurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBailleurAllUpdatablePropertiesEquals(Bailleur expected, Bailleur actual) {
        assertBailleurUpdatableFieldsEquals(expected, actual);
        assertBailleurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBailleurAutoGeneratedPropertiesEquals(Bailleur expected, Bailleur actual) {
        assertThat(expected)
            .as("Verify Bailleur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBailleurUpdatableFieldsEquals(Bailleur expected, Bailleur actual) {
        assertThat(expected)
            .as("Verify Bailleur relevant properties")
            .satisfies(e -> assertThat(e.getNomBailleur()).as("check nomBailleur").isEqualTo(actual.getNomBailleur()))
            .satisfies(e -> assertThat(e.getBudgetPrevu()).as("check budgetPrevu").isEqualTo(actual.getBudgetPrevu()))
            .satisfies(e -> assertThat(e.getBudgetDepense()).as("check budgetDepense").isEqualTo(actual.getBudgetDepense()))
            .satisfies(e -> assertThat(e.getBudgetRestant()).as("check budgetRestant").isEqualTo(actual.getBudgetRestant()))
            .satisfies(e -> assertThat(e.getNbrePC()).as("check nbrePC").isEqualTo(actual.getNbrePC()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBailleurUpdatableRelationshipsEquals(Bailleur expected, Bailleur actual) {}
}
