package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FormationContinueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormationContinueAllPropertiesEquals(FormationContinue expected, FormationContinue actual) {
        assertFormationContinueAutoGeneratedPropertiesEquals(expected, actual);
        assertFormationContinueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormationContinueAllUpdatablePropertiesEquals(FormationContinue expected, FormationContinue actual) {
        assertFormationContinueUpdatableFieldsEquals(expected, actual);
        assertFormationContinueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormationContinueAutoGeneratedPropertiesEquals(FormationContinue expected, FormationContinue actual) {
        assertThat(expected)
            .as("Verify FormationContinue auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormationContinueUpdatableFieldsEquals(FormationContinue expected, FormationContinue actual) {
        assertThat(expected)
            .as("Verify FormationContinue relevant properties")
            .satisfies(e -> assertThat(e.getNomFormationC()).as("check nomFormationC").isEqualTo(actual.getNomFormationC()))
            .satisfies(e -> assertThat(e.getDuree()).as("check duree").isEqualTo(actual.getDuree()))
            .satisfies(e -> assertThat(e.getAdmission()).as("check admission").isEqualTo(actual.getAdmission()))
            .satisfies(e -> assertThat(e.getDiplomeRequis()).as("check diplomeRequis").isEqualTo(actual.getDiplomeRequis()))
            .satisfies(e -> assertThat(e.getNiveauEtude()).as("check niveauEtude").isEqualTo(actual.getNiveauEtude()))
            .satisfies(e -> assertThat(e.getFiliere()).as("check filiere").isEqualTo(actual.getFiliere()))
            .satisfies(e -> assertThat(e.getSerie()).as("check serie").isEqualTo(actual.getSerie()))
            .satisfies(e -> assertThat(e.getCfp()).as("check cfp").isEqualTo(actual.getCfp()))
            .satisfies(e -> assertThat(e.getLycee()).as("check lycee").isEqualTo(actual.getLycee()))
            .satisfies(e -> assertThat(e.getFicheFormation()).as("check ficheFormation").isEqualTo(actual.getFicheFormation()))
            .satisfies(
                e ->
                    assertThat(e.getFicheFormationContentType())
                        .as("check ficheFormation contenty type")
                        .isEqualTo(actual.getFicheFormationContentType())
            )
            .satisfies(e -> assertThat(e.getLibellePC()).as("check libellePC").isEqualTo(actual.getLibellePC()))
            .satisfies(
                e -> assertThat(e.getMontantPriseEnCharge()).as("check montantPriseEnCharge").isEqualTo(actual.getMontantPriseEnCharge())
            )
            .satisfies(e -> assertThat(e.getCoutFormation()).as("check coutFormation").isEqualTo(actual.getCoutFormation()))
            .satisfies(e -> assertThat(e.getDetailPC()).as("check detailPC").isEqualTo(actual.getDetailPC()))
            .satisfies(e -> assertThat(e.getNomDiplome()).as("check nomDiplome").isEqualTo(actual.getNomDiplome()))
            .satisfies(e -> assertThat(e.getAutreDiplome()).as("check autreDiplome").isEqualTo(actual.getAutreDiplome()))
            .satisfies(e -> assertThat(e.getNomDebouche()).as("check nomDebouche").isEqualTo(actual.getNomDebouche()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormationContinueUpdatableRelationshipsEquals(FormationContinue expected, FormationContinue actual) {
        assertThat(expected)
            .as("Verify FormationContinue relationships")
            .satisfies(e -> assertThat(e.getFormation()).as("check formation").isEqualTo(actual.getFormation()));
    }
}
