package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExperienceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllPropertiesEquals(Experience expected, Experience actual) {
        assertExperienceAutoGeneratedPropertiesEquals(expected, actual);
        assertExperienceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllUpdatablePropertiesEquals(Experience expected, Experience actual) {
        assertExperienceUpdatableFieldsEquals(expected, actual);
        assertExperienceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAutoGeneratedPropertiesEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableFieldsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relevant properties")
            .satisfies(e -> assertThat(e.getDateDebut()).as("check dateDebut").isEqualTo(actual.getDateDebut()))
            .satisfies(e -> assertThat(e.getDateFin()).as("check dateFin").isEqualTo(actual.getDateFin()))
            .satisfies(e -> assertThat(e.getNomEntreprise()).as("check nomEntreprise").isEqualTo(actual.getNomEntreprise()))
            .satisfies(e -> assertThat(e.getPosteOccupe()).as("check posteOccupe").isEqualTo(actual.getPosteOccupe()))
            .satisfies(e -> assertThat(e.getMission()).as("check mission").isEqualTo(actual.getMission()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableRelationshipsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relationships")
            .satisfies(e -> assertThat(e.getEleve()).as("check eleve").isEqualTo(actual.getEleve()))
            .satisfies(e -> assertThat(e.getEtudiant()).as("check etudiant").isEqualTo(actual.getEtudiant()))
            .satisfies(e -> assertThat(e.getProfessionnel()).as("check professionnel").isEqualTo(actual.getProfessionnel()))
            .satisfies(e -> assertThat(e.getDemandeur()).as("check demandeur").isEqualTo(actual.getDemandeur()));
    }
}
